$ graph
- hamiltonian paths = start from the source and cover all the nodes without visiting any node twice
- hamiltonian cycle = hamiltonian path ka last node src se direct edge rkhta ho to vo hamiltonian cycle

- cycle detection in undirected = agar ek node mei pohnchne ke ek se zyada tareeke 
- cycle detection in directed = isme agar BFS se kiya to kaam khtm
	/\	
       /  \	
      _\||/_  aisi ko bhi cycle bolega ye
- so its better to use self dfs with fresh visited boolean array using backtracking in cycle detection in directed &&&&&& self - bfs in undirected with common vis array	


- bipartite = 2 sets mei divide kr skta hu vertices jisse all the edges are across the set and none in btw the vert of a set
// every acyclic graph is a bipartite
// cyclic with even number of vertices is a bipartite
// cyclic with odd number of vertices is not a bipartite

- has path vale mei backtracking krte time vis false nhi krte vrna never ending recursion mei fs jaoge

- topological sort = mai kisi pe dependent hu to vo mujse phele print kro -- dfs and stack in post order
- we cannot use preorder printing in topological sort (think why?)
- topological sort happens in directed acyclic graph

- why dijskrta fail in negative weight cycle- 
	Recall that in Dijkstra's algorithm, once a vertex is marked as "closed" (and out of the open set) - the algorithm found the shortest path to it, and will never have to develop this node again - it assumes the path developed to this path is the shortest.
	But with negative weights - it might not be true. For example:
      	     A
       	    / \
     	   /   \
    	  /     \
   	 5       2
  	/         \
  	B--(-10)-->C

	V={A,B,C} ; E = {(A,C,2), (A,B,5), (B,C,-10)}
	Dijkstra from A will first develop C, and will later fail to find A->B->C

- bellman ford - works for negative wt edges to find shortest path - negative cycles mei, shortest path is not defined

- mother vertex ke liye topological sort lgao aur top most vali hi hogi ya nhi hogi .. to check ek baar dfs lgado aur agar sbko cover krle ye to ye motheer vertex vrna no mother vertex
